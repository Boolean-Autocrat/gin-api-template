// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: auth.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createOrUpdateSession = `-- name: CreateOrUpdateSession :exec
INSERT INTO "user_sessions" ("user", "token") VALUES ($1, $2) ON CONFLICT ("user") DO UPDATE SET "token" = $2, "created_at" = now()
`

type CreateOrUpdateSessionParams struct {
	User  uuid.UUID `json:"user"`
	Token string    `json:"token"`
}

func (q *Queries) CreateOrUpdateSession(ctx context.Context, arg CreateOrUpdateSessionParams) error {
	_, err := q.db.ExecContext(ctx, createOrUpdateSession, arg.User, arg.Token)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "users" ("name", "email", "picture") VALUES ($1, $2, $3) RETURNING "id"
`

type CreateUserParams struct {
	Name    string `json:"name"`
	Email   string `json:"email"`
	Picture string `json:"picture"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Name, arg.Email, arg.Picture)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM "user_sessions" WHERE "user" = $1 AND "token" = $2
`

type DeleteSessionParams struct {
	User  uuid.UUID `json:"user"`
	Token string    `json:"token"`
}

func (q *Queries) DeleteSession(ctx context.Context, arg DeleteSessionParams) error {
	_, err := q.db.ExecContext(ctx, deleteSession, arg.User, arg.Token)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, "user", token, created_at FROM "user_sessions" WHERE "token" = $1
`

func (q *Queries) GetSession(ctx context.Context, token string) (UserSession, error) {
	row := q.db.QueryRowContext(ctx, getSession, token)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.User,
		&i.Token,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, picture FROM "users" WHERE "email" = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Picture,
	)
	return i, err
}
